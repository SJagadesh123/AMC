/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.17
 * Generated at: 2024-01-03 16:13:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.zm.ams.services.impl.AppraisalLocServiceImpl;
import com.zm.ams.services.AppraisalLocService;
import com.zm.ams.services.impl.AmcServiceImpl;
import com.zm.ams.services.impl.AmcProjectServiceImpl;
import com.zm.ams.services.impl.PropertyTypeServiceImpl;
import com.zm.ams.services.PropertyTypeService;
import com.zm.ams.dto.AmcSearchCriteria;
import com.zm.ams.dao.jdbc.impl.AmcProjectDaoImpl;
import com.zm.ams.dto.AmcProject;
import java.util.List;

public final class view_002dproject_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/header.jsp", Long.valueOf(1704283603531L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.zm.ams.services.AppraisalLocService");
    _jspx_imports_classes.add("com.zm.ams.dto.AmcSearchCriteria");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.zm.ams.services.impl.AmcProjectServiceImpl");
    _jspx_imports_classes.add("com.zm.ams.dao.jdbc.impl.AmcProjectDaoImpl");
    _jspx_imports_classes.add("com.zm.ams.services.impl.PropertyTypeServiceImpl");
    _jspx_imports_classes.add("com.zm.ams.dto.AmcProject");
    _jspx_imports_classes.add("com.zm.ams.services.PropertyTypeService");
    _jspx_imports_classes.add("com.zm.ams.services.impl.AppraisalLocServiceImpl");
    _jspx_imports_classes.add("com.zm.ams.services.impl.AmcServiceImpl");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"CSS/headerstyle.css\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<nav>\r\n");
      out.write("		<div id=\"logo\">\r\n");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("		<div id=\"home-logout\">\r\n");
      out.write("			<a href=\"home-page.jsp\">Home</a> \r\n");
      out.write("			\r\n");
      out.write("		</div>\r\n");
      out.write("		<form action=\"logout\"><input type=\"submit\" value=\"logout\"></form>\r\n");
      out.write("	</nav>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"CSS/view-project.css\">\r\n");
      out.write("    <title>View Projects</title>\r\n");
      out.write("    <style type=\"text/css\">\r\n");
      out.write("    	h3{\r\n");
      out.write("    	text-align: center;\r\n");
      out.write("    	}\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
session = request.getSession();

int amcId = Integer.parseInt((String)session.getAttribute("amcId")); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("<h3>Projects of <span>");
      out.print( new AmcServiceImpl().get(amcId).get().getAmcName() );
      out.write("</span></h3>\r\n");
      out.write("\r\n");
      out.write("    <input type=\"button\" value=\"Back\" onclick=\"window.location.href='amc-list.jsp'\"/>\r\n");
      out.write("    <table>\r\n");
      out.write("        <thead>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>Project Type</th>\r\n");
      out.write("            <th>Project Client</th>\r\n");
      out.write("            <th>Project State</th>\r\n");
      out.write("            <th>Project City</th>\r\n");
      out.write("            <th>Project Start Date</th>\r\n");
      out.write("            <th>Project End Date</th>\r\n");
      out.write("            <th>Net Worth</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        </thead>\r\n");
      out.write("        <tbody>\r\n");
      out.write("        	");
 
        		
        		
        		List<AmcProject> amcProject = new AmcProjectServiceImpl()
        										.getAll(new AmcSearchCriteria(amcId));
        										
        		PropertyTypeService property = new PropertyTypeServiceImpl();	
        		AppraisalLocService location = new AppraisalLocServiceImpl();
        										
        										
        										
      out.write("\r\n");
      out.write("        		\r\n");
      out.write("        		\r\n");
      out.write("        		");
for(AmcProject project : amcProject)
        		{
        		
      out.write("\r\n");
      out.write("        		<tr>\r\n");
      out.write("        			<td>");
      out.print(property.get(project.getPropertyTypeId()).get().getPropertyTypeDesc() );
      out.write("</td>\r\n");
      out.write("        			<td>");
      out.print(project.getProjectClient() );
      out.write("</td>\r\n");
      out.write("        			<td>");
      out.print(location.get(project.getLocId()).get().getState() );
      out.write("</td>\r\n");
      out.write("        			<td>");
      out.print(location.get(project.getLocId()).get().getCity() );
      out.write("\r\n");
      out.write("        			<td>");
      out.print(project.getStartDate() );
      out.write("</td>\r\n");
      out.write("        			<td>");
      out.print(project.getEndDate() );
      out.write("</td>\r\n");
      out.write("        			<td>");
      out.print(project.getEstimatedValue() );
      out.write("</td>\r\n");
      out.write("        		</tr>\r\n");
      out.write("        		");

        			}
        		
      out.write("\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
